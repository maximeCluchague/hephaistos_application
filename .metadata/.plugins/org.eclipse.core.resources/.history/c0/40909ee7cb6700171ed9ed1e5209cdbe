<!DOCTYPE html>
<html lang="en" class="no-js">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> 
		<meta name="viewport" content="width=device-width, initial-scale=1.0"> 
		<title>Hephaistos Application</title>
		<meta name="description" content="Creative Button Styles  - Modern and subtle styles &amp; effects for buttons" />
		<meta name="keywords" content="button styles, css3, modern, flat button, subtle, effects, hover, web design" />
		<meta name="author" content="Codrops" />
		<link rel="shortcut icon" href="../favicon.ico"> 
		<link rel="stylesheet" type="text/css" href="css/default.css" />
		<link rel="stylesheet" type="text/css" href="css/component.css" />
		<link rel="stylesheet" href="css/logoMachineUtilise.css" />
		
		<style>
			canvas{
				width: 100%;
			}


			select {
			    padding:3px;
			    margin: 0;
			    -webkit-border-radius:4px;
			    -moz-border-radius:4px;
			    border-radius:4px;
			    background: #226fbe;
			    color:#FFFFFF;
			    border:none;
			    outline:none;
			    display: inline-block;
			    -webkit-appearance:none;
			    -moz-appearance:none;
			    appearance:none;
			    cursor:pointer;
			}
			
			.littleButton{
				padding: 8px 24px;
			}
			.console {
				color: white;
			    width: 100%;
			    height: 15em;
 			 	transition: all .3s
 			 	ease-out;
			    padding: 12px 20px;
			    box-sizing: border-box;
			    border: 3px solid #FFFFFF;
			    border-radius: 4px;
			    background-color: #FFFFFF;
				color: #666666;
			    resize: none;
			    font-family: Verdana, Geneva, sans-serif;
           		font-size:15px
			}
			

			.console:focus{
				 height: 30em;
				
			}
			
			.panel{
				background-color: #4593e3;
			    box-sizing: border-box;
			    border: 3px solid #FFFFFF;
			    border-radius: 4px;
				padding: 10px;
				width: 100%;
			}
			.sousPanel{
				background-color: #4593e3;
			    box-sizing: border-box;
			    border: 1px solid #FFFFFF;
			    padding: 4px;
			    border-radius: 4px;
				width: 100%;
			}
			input[type=text] {
			    padding: 12px 20px;
			    margin: 8px 0;
			    box-sizing: border-box;
			    border: none;
			    background-color: #226fbe;
			    color: white;
			    transition: all 0.5s;
			}
			input[type=text]:focus {
			    background-color: #1a5795;
			    color: #FFFFFF;
			}
			input[type=text]:hover {
			    background-color: #1a5795;
			    color: #FFFFFF;
			}
			.deconnexion:hover{
				background-color: #ff5457;
			}
			.champsSaisie{
				text-align:center;
			    width: 50%;
			    box-sizing: border-box;
			    border: none;
			    background-color: #226fbe;
			    color: white;
			    font-family: Verdana, Geneva, sans-serif;
           		font-size:15px
			}
			
			.clear{
				background-color: #226fbe;
				box-shadow: none;
			}
			.clear:hover{
				background-color: #1a5795;
				box-shadow: none;
			}
			.clear:active{
				background-color: #ff5457;
			}
			
			.background {
				width : 1000px;
			}

		</style>

	</head>
	<body>
		<div class="container">
			<!-- Top Navigation -->
			<div id="device"><span></span></div></br>
			<header class="header">
				<h1>Hephaistos Application<span>Server interface</span></h1>	
			</header>
			<section class="color-6 background">
	
		<class="text"> Adresse</class> </br> 
		<input id="adresse" type="text" class="champsSaisie" size="20" onclick="javascript:this.value = '';" /></br>
		<class="text"> Port</class> </br> 
		<input id="port" type="text" class="champsSaisie" size="20" onclick="javascript:this.value = '';"/></br>
		<center>
		</br>
		<button class="btn btn-4 btn-4a icon-arrow-right" onclick="connexion()">Connexion</button> 
		<button class="btn btn-4 btn-4d icon-arrow-left deconnexion" onclick="deconnexion()">Deconnexion</button>
		</center>
	 	
	</br>
	<class="text">Console Client</class></br>
	
	<textarea id="console" class="console" readonly="readonly" rows="10" cols="130"></textarea></br>
	<button class="btn btn-7 btn-7d btn-icon-only icon-remove clear" value="Clear" onclick="clearConsole()"><span>Clear</span></button>
		
	</section>
	<header>
				<h1><span>© Equipe hephaistos - INRIA Sophia-Antipolis</span></h1>	
			</header>
		</div><!-- /container -->
		
		<!-- For the side ad -->
		<script type="text/javascript">
			
			adresse.value = "localhost";
			port.value = "8080";
			document.getElementById("console").value += "\nEN ATTENTE D'UNE CONNEXION ...";
			
			var webSocket = null;
			var isConnect = false;
			
			function autoScroll(){
				var textarea = document.getElementById("console");
				textarea.scrollTop = textarea.scrollHeight;
			}
			
			function connexion(){
				try{
					webSocket.close();
					
				}catch(exception){
					
				}
				try{
					url = "ws://"+adresse.value.toString()+":"+port.value.toString()+"/hephaistos_project/hephaistoswebserver";
					
					webSocket = new WebSocket(url);
					
					webSocket.onopen = function(event){
						isConnect = true;
						document.getElementById("console").value += "\n[---> CONNEXION ETABLIE AVEC \'"+url+"\']\n\n";
						autoScroll();
					}
					
					webSocket.onclose = function(event){
						document.getElementById("console").value += "\n[-x-> CONNEXION INTERROMPU AVEC \'"+url+"\']";
						document.getElementById("console").value += "\n\nEN ATTENTE D'UNE CONNEXION ...";
						autoScroll();
					}
					
					webSocket.onerror = function(event){
						document.getElementById("console").value = "\n[IMPOSSIBLE DE SE CONNECTER \'"+url+"\']";
					}
					
					webSocket.onmessage = function processMessage(sensorMessage) {
						var json = JSON.parse(sensorMessage.data);
						document.getElementById("console").value += "<MESSAGE> {\"idCapteur\":\""+ json.idCapteur+"\",\"acquisition\":\""+ json.acquisition+"\",\"date\":\"" +json.date+"\",\"commande\":\""+json.commande+"\"}\n";
						autoScroll();
						if(json.commande == "deccrocherCapteur"){
							deccrocherCapteur(json.idCapteur);
						}else{
							accrocherCapteur(json.idCapteur);
							for(i=0;i<capteurOnImage.length;i++){
								if(json.idCapteur==capteurOnImage[i].idCapteur){
									var x1 = capteurOnImage[i].x1;
									var y1 = capteurOnImage[i].y1;
									var x2 = capteurOnImage[i].x2;
									var y2 = capteurOnImage[i].y2;
									var idCapteur = capteurOnImage[i].idCapteur;
									updateLine(x1,y1,x2,y2,idCapteur,json.acquisition);
									
									updateZone(idCapteur,json.acquisition);
									
								}
							}
						}
					}
				}catch(exception){
					document.getElementById("console").value += "\n\n[IMPOSSIBLE DE SE CONNECTER]";
				}
			}
				
			function deconnexion(){
				
				if(isConnect){
					webSocket.close();
					isConnect = false;
				}else{
					document.getElementById("console").value += "\n\nVous n'êtes pas connecté";
					autoScroll();
				}
				
			}
			
			function clearConsole(){
				document.getElementById("console").value = "";
			}
</script>
	</body>
</html>