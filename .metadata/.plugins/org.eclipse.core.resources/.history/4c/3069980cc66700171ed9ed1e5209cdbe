<!DOCTYPE html>
<html lang="en" class="no-js">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> 
		<meta name="viewport" content="width=device-width, initial-scale=1.0"> 
		<title>Hephaistos Application</title>
		<meta name="description" content="Creative Button Styles  - Modern and subtle styles &amp; effects for buttons" />
		<meta name="keywords" content="button styles, css3, modern, flat button, subtle, effects, hover, web design" />
		<meta name="author" content="Codrops" />
		<link rel="shortcut icon" href="../favicon.ico"> 
		<link rel="stylesheet" type="text/css" href="css/default.css" />
		<link rel="stylesheet" type="text/css" href="css/component.css" />
		<link rel="stylesheet" href="css/logoMachineUtilise.css" />
		
		<style>
			canvas{
				width: 100%;
			}


			select {
			    padding:3px;
			    margin: 0;
			    -webkit-border-radius:4px;
			    -moz-border-radius:4px;
			    border-radius:4px;
			    background: #226fbe;
			    color:#FFFFFF;
			    border:none;
			    outline:none;
			    display: inline-block;
			    -webkit-appearance:none;
			    -moz-appearance:none;
			    appearance:none;
			    cursor:pointer;
			}
			
			.littleButton{
				padding: 8px 24px;
			}
			.console {
				color: white;
			    width: 100%;
			    height: 15em;
 			 	transition: all .3s
 			 	ease-out;
			    padding: 12px 20px;
			    box-sizing: border-box;
			    border: 3px solid #FFFFFF;
			    border-radius: 4px;
			    background-color: #FFFFFF;
				 color: #666666;
			    resize: none;
			    font-family: Verdana, Geneva, sans-serif;
           		font-size:15px
			}
			

			.console:focus{
				 height: 30em;
				
			}
			
			.panel{
				background-color: #4593e3;
			    box-sizing: border-box;
			    border: 3px solid #FFFFFF;
			    border-radius: 4px;
				padding: 10px;
				width: 100%;
			}
			.sousPanel{
				background-color: #4593e3;
			    box-sizing: border-box;
			    border: 1px solid #FFFFFF;
			    padding: 4px;
			    border-radius: 4px;
				width: 100%;
			}
			input[type=text] {
			    padding: 12px 20px;
			    margin: 8px 0;
			    box-sizing: border-box;
			    border: none;
			    background-color: #226fbe;
			    color: white;
			    transition: all 0.5s;
			}
			input[type=text]:focus {
			    background-color: #1a5795;
			    color: #FFFFFF;
			}
			input[type=text]:hover {
			    background-color: #1a5795;
			    color: #FFFFFF;
			}
			.deconnexion:hover{
				background-color: #ff5457;
			}
			.champsSaisie{
				text-align:center;
			    width: 50%;
			    box-sizing: border-box;
			    border: none;
			    background-color: #226fbe;
			    color: white;
			    font-family: Verdana, Geneva, sans-serif;
           		font-size:15px
			}
			
			.clear{
				background-color: #226fbe;
				box-shadow: none;
			}
			.clear:hover{
				background-color: #1a5795;
				box-shadow: none;
			}
			
			.header {
				transition: all 0.3s;
			}

			.header:active{
			 	padding: 5em;
				
				
			}
			
			.background {
				width : 1000px;
			}

		
		</style>

	</head>
	<body>
		<div class="container">
			<!-- Top Navigation -->
			<div id="device"><span></span></div></br>
			<header class="header">
				<h1>Hephaistos Application<span>Viewer Editor</span></h1>	
			</header>
			<button class="help">Help</button>
			<section class="color-6 background">
	
		<class="text"> Adresse</class> </br> 
		<input id="adresse" type="text" class="champsSaisie" size="20" onclick="javascript:this.value = '';" /></br>
		<class="text"> Port</class> </br> 
		<input id="port" type="text" class="champsSaisie" size="20" onclick="javascript:this.value = '';"/></br>
		<center>
		<button class="btn btn-4 btn-4a icon-arrow-right" onclick="connexion()">Connexion</button> 
		<button class="btn btn-4 btn-4d icon-arrow-left deconnexion" onclick="deconnexion()">Deconnexion</button>
		</center>
	 	
	</br>
	<class="text">Console Client</class></br>
	
	<textarea id="console" class="console" readonly="readonly" rows="10" cols="130"></textarea></br>
	<button class="btn btn-7 btn-7d btn-icon-only icon-remove clear" value="Clear" onclick="clearConsole()"><span>Clear</span></button>

	 
	</br></br>
	
	<center>
		<canvas id="myCanvas" width="300" height="100" style="border:1px solid #FFFFFF" >
		 Votre navigateur ne supporte pas canvas.
		</canvas>
	</center>

	<form>
		<class="text"> Charger une image</class><br>
		<input type="text" id="urlImage">
		<input type="button" class="btn btn-6 btn-6i littleButton" value="Charger" onclick="chargerImage()"/>
		</br></br>
		
		<section class="panel">
			<fieldset type="ChampsAjout">
       			<legend>Ajouter un capteur</legend> <!-- Titre du fieldset -->

				<class="text"> IdCapteur</class> <select id="capteurs"></select>
			    </br>
			    <class="text"> x1 = </class><input type="text" id="x1" size="2">
				<class="text"> y1 = </class><input type="text" id="y1" size="2">
				<class="text"> x2 = </class><input type="text" id="x2" size="2">
				<class="text"> y2 = </class><input type="text" id="y2" size="2">
				</br>
				<input type="button" class="btn btn-6 btn-6i littleButton" value="Ajouter" onclick="ajouter()"/>
				<input type="button" class="btn btn-6 btn-6i littleButton" value="Annuler" onclick="annuler()"/>
			</fieldset>
			<fieldset type="ChampsAjout">
       			<legend>Ajouter une zone</legend> <!-- Titre du fieldset -->
				<class="text"> Nom = </class><input type="text" id="nomZone" size="10">
			    <class="text"> Rayon = </class><input type="text" id="r" size="1" value="50">
				<class="text"> Nombre de Personne = </class><input type="text" id="nbPersonne" size="1" value="0">
				</br>
				<class="text"> x = </class><input type="text" id="x" size="2">
				<class="text"> y = </class><input type="text" id="y" size="2">
				
			</fieldset>
			<fieldset>
       			<legend type="ChampsAjout">Créer une liaison</legend> <!-- Titre du fieldset -->
				<class="text"> zoneA</class> <select id="zone1"></select>
				<class="text"> IdCapteur</class> <select id="capteursAjoutés"></select>
				<class="text"> zoneB</class> <select id="zone2"></select>
				<input type="button" class="btn btn-6 btn-6i littleButton" value="Lier" onclick="lier()"/>
			</fieldset>
		</section>
		
	</form> </br>
				
	</section>
	<header>
				<h1><span>© Equipe hephaistos - INRIA Sophia-Antipolis</span></h1>	
			</header>
		</div><!-- /container -->
		
		<!-- For the side ad -->
		<script type="text/javascript">
			
			adresse.value = "localhost";
			port.value = "8080";
			document.getElementById("console").value += "\nEN ATTENTE D'UNE CONNEXION ...";
			
			var webSocket = null;
			var isConnect = false;
			
			function autoScroll(){
				var textarea = document.getElementById("console");
				textarea.scrollTop = textarea.scrollHeight;
			}
			
			function connexion(){
				try{
					webSocket.close();
					
				}catch(exception){
					
				}
				try{
					url = "ws://"+adresse.value.toString()+":"+port.value.toString()+"/hephaistos_project/hephaistoswebserver";
					
					webSocket = new WebSocket(url);
					
					webSocket.onopen = function(event){
						isConnect = true;
						document.getElementById("console").value += "\n[---> CONNEXION ETABLIE AVEC \'"+url+"\']\n\n";
						autoScroll();
					}
					
					webSocket.onclose = function(event){
						document.getElementById("console").value += "\n[-x-> CONNEXION INTERROMPU AVEC \'"+url+"\']";
						document.getElementById("console").value += "\n\nEN ATTENTE D'UNE CONNEXION ...";
						autoScroll();
					}
					
					webSocket.onerror = function(event){
						document.getElementById("console").value = "\n[IMPOSSIBLE DE SE CONNECTER \'"+url+"\']";
					}
					
					webSocket.onmessage = function processMessage(sensorMessage) {
						var json = JSON.parse(sensorMessage.data);
						document.getElementById("console").value += "<MESSAGE> {\"idCapteur\":\""+ json.idCapteur+"\",\"acquisition\":\""+ json.acquisition+"\",\"date\":\"" +json.date+"\",\"commande\":\""+json.commande+"\"}\n";
						autoScroll();
						if(json.commande == "deccrocherCapteur"){
							deccrocherCapteur(json.idCapteur);
						}else{
							accrocherCapteur(json.idCapteur);
							for(i=0;i<capteurOnImage.length;i++){
								if(json.idCapteur==capteurOnImage[i].idCapteur){
									var x1 = capteurOnImage[i].x1;
									var y1 = capteurOnImage[i].y1;
									var x2 = capteurOnImage[i].x2;
									var y2 = capteurOnImage[i].y2;
									var idCapteur = capteurOnImage[i].idCapteur;
									updateLine(x1,y1,x2,y2,idCapteur,json.acquisition);
									
									updateZone(idCapteur,json.acquisition);
									
								}
							}
						}
					}
				}catch(exception){
					document.getElementById("console").value += "\n\n[IMPOSSIBLE DE SE CONNECTER]";
				}
			}
				
			function deconnexion(){
				
				if(isConnect){
					webSocket.close();
					isConnect = false;
				}else{
					document.getElementById("console").value += "\n\nVous n'êtes pas connecté";
					autoScroll();
				}
				
			}
			
			function clearConsole(){
				document.getElementById("console").value = "";
			}
</script>

<script type="text/javascript">
	
	var imageChargee = false;

	//var url = "ws://localhost:8080/hephaistos_project/hephaistoswebserver";
	
	//var webSocket = new WebSocket(url);
	
	var context = document.getElementById('myCanvas').getContext("2d");
	
	urlImage.value = "planBatiment.jpg";
	
	var capteurDispo = [];
	nbCapteurDispo =0;
	
	nbOption = 0;
	
	var capteurOnImage = [];
	
	var zone = [];
	
	var firstPointSelected = false;
	var secondPointSelected = false;
	var zonePointSelected = false;
	
	var ajouter = function(){
		if(imageChargee){
			if(nbOption>0){
				if(firstPointSelected && secondPointSelected){
					firstPointSelected = false;
					secondPointSelected = false;
					
					var e = document.getElementById("capteurs");
					var currentSelect = e.options[e.selectedIndex].text;
					capteurOnImage.push({idCapteur:currentSelect,x1:x1.value,y1:y1.value,x2:x2.value,y2:y2.value});
					
					// On met a jour le champ capteur pour créer les arrete du graphe
					var capteurs = document.getElementById ("capteursAjoutés");
					var newOption = new Option (currentSelect, "value");
					capteurs.options.add (newOption);
					
					// On trace une premiere ligne
					context.strokeStyle='#FF0000';
			        context.beginPath();
			        context.moveTo(parseInt(x1.value),parseInt(y1.value));
			        context.lineTo(parseInt(x2.value),parseInt(y2.value));
			        context.lineWidth = 5;
			        context.stroke();
			        
			        // On dessine le nom du capteur
			        context.fillStyle = "#FFFFFF";
			        context.fillRect((parseInt(x1.value)+parseInt(x2.value))/2+20,(parseInt(y1.value)+parseInt(y2.value))/2-40, 35 + currentSelect.length*8, 25);
			        context.strokeStyle = "#444444";
			        context.lineWidth = 2;
			        context.strokeRect((parseInt(x1.value)+parseInt(x2.value))/2+20,(parseInt(y1.value)+parseInt(y2.value))/2-40, 35 + currentSelect.length*8, 25);
			        context.fillStyle = "blue";
			        context.textAlign="start"; 
			        context.font = "15px Arial";
			        context.fillText("ID : "+currentSelect,(parseInt(x1.value)+parseInt(x2.value))/2+25,(parseInt(y1.value)+parseInt(y2.value))/2-22); 
			        
			        
			        removeOption();
					x1.value = "";
					y1.value = "";
					x2.value = "";
					y2.value = "";
				}else{
					alert("Veuillez sélectionner des coordonnées sur l'image en placant votre curseur sur le l'image puis en appuyant sur la touche ENTRER");
				}
			}else{
				alert("Aucun capteur disponible ... ");
			}
		}else{
			alert("Veuillez charger une image");
		}
	}
	
	var zoneExiste = function(nomZone){
		for(i=0;i<zone.length;i++){
			if(zone[i].nomZone==nomZone){
				return true;
			}
		}return false;
	}
	
	var ajouterZone = function(){
		if(imageChargee){
			if(nomZone.value.length>0){
				if(zonePointSelected){
					if(!zoneExiste(nomZone.value)){
						// On stocke la nouvelle zone dans une liste
						zone.push({nomZone:nomZone.value,x:x.value,y:y.value,r:r.value,nbPersonne:0,capteurVoison:[]});
						
						var zone1 = document.getElementById ("zone1");
						var newOption = new Option (nomZone.value, "value");
						zone1.options.add (newOption);
						var zone2 = document.getElementById ("zone2");
						var newOption = new Option (nomZone.value, "value");
						zone2.options.add (newOption);
						
						// On dessine le cercle
						context.beginPath();
						context.fillStyle="#9EC8ED"
						context.arc(x.value, y.value, r.value, 0, 2 * Math.PI);
						context.fill();
						context.strokeStyle="#3D5D87";
						context.beginPath();
						context.lineWidth="2";
						context.arc(x.value, y.value, r.value, 0, 2 * Math.PI);
						context.stroke();
						
						// On écrit le nom de la zone
						context.fillStyle = "#263A61";
					    context.font = "15px Arial";
					    context.textAlign="center"; 
					    context.fillText(nomZone.value,x.value,parseInt(y.value)-parseInt(r.value/3));
					 	// On écrit le nombre de personnes présent dans la zone
					    context.font = "42px Arial";
					    context.fillText(nbPersonne.value,x.value,parseInt(y.value)+parseInt(r.value/2));
					    x.value = "";
						y.value = "";
						nomZone.value ="";
						nbPersonne.value="0";
						zonePointSelected = false;
					}else{
						alert("Le nom de zone est déja utilisé");
					}
				}else{
					alert("Veuillez sélectionner des coordonnées pour ajouter une nouvelle zone");
				}
			}else{
				alert("Veuillez entrer un nom pour créer une nouvelle zone");
			}

		}else{
			alert("Veuillez charger une image");
		}
	}
	

	
	var updateZone = function(idCapteur,acquisition){
		if(acquisition>0){
			if(zone.length>0){
				document.getElementById("console").value +="zone.length="+zone.length+"\n";
				for(i=0;i<zone.length;i++){
					var capteurVoisin = zone[i].capteurVoison;
					document.getElementById("console").value +=capteurVoisin.toString();
					//if(capteurVoisin.length>0){
					//	for(j=0;j<capteurVoisin.length;j++){
					//		document.getElementById("console").value +="\tj:"+i+" eme itération\n";
					//	}
					//}
				}
			}
		}

	}
	
	var lier = function(){
		try{
			var zone1 = document.getElementById("zone1");
			var z1 = zone1.options[zone1.selectedIndex].text;
			
			var zone2 = document.getElementById("zone2");
			var z2 = zone2.options[zone2.selectedIndex].text;
			
			var capteur = document.getElementById("capteursAjoutés");
			var c = capteur.options[capteur.selectedIndex].text;
			if(z1 != z2){
				//
				// Debut CREATION ARRETE
				//
				for(i=0;i<zone.length;i++){
					if(zone[i].nomZone==z1){
						zone[i].capteurVoison.push(c);
						var voisinZ1 = zone[i].capteurVoison;
						document.getElementById("console").value += "<CONSTRUCTION GRAPHE> Capteur "+zone[i].capteurVoison[0]+" ajoutée à "+ zone[i].nomZone+"\n";
						
					}
					if(zone[i].nomZone==z2){
						zone[i].capteurVoison.push(c);
						var voisinZ2 = zone[i].capteurVoison;
						document.getElementById("console").value += "<CONSTRUCTION GRAPHE> Capteur "+zone[i].capteurVoison[0]+" ajoutée à "+ zone[i].nomZone+"\n";
					}
				}
				//
				// Fin CREATION ARRETE
				//
			}else{
				alert("Erreur : Vous devez séléctionner 2 zones différentes ! ");
			}
		}catch(exception){
			alert("Il manque des éléments ... ");
		}
	}
	
	var annuler=function(){
		firstPointSelected = false;
		secondPointSelected = false;
		x1.value = "";
		y1.value = "";
		x2.value = "";
		y2.value = "";
	}
	
	var deccrocherCapteur = function(capteur){
		for(i=0;i<capteurDispo.length;i++){
			if(capteur==capteurDispo[i]){
				capteurDispo.splice(i,1);
				nbCapteurDispo=nbCapteurDispo-1;
			}
		}
	}
	
	var accrocherCapteur = function(capteur){
		var estAccrocher =false;
		for(i=0;i<capteurDispo.length;i++){
			if(capteur==capteurDispo[i]){
				estAccrocher =true;
			}
		}
		if(!estAccrocher){
			nbCapteurDispo++;
			capteurDispo.push(capteur);
			addOption(capteur);
		}
	}
	
	function addOption(capteur)
	{
	    var select = document.getElementById ("capteurs");
	    var newOption = new Option (capteur, "value");
	    select.options.add (newOption);
	    nbOption++;
	}
	
	function removeOption(){
		var x = document.getElementById("capteurs");
	    x.remove(x.selectedIndex);
	    nbOption=nbOption-1;
	}

	
	var imgWidth;
	var imgHeight;

	function chargerImage(){
		var img = new Image();
		img.onload = function () {
		    context.drawImage(img,0,0, img.width, img.height);
		}
		
		img.src = urlImage.value;
		myCanvas.width = img.width;
		imgWidth = img.width;
		myCanvas.height = img.height;
		imgHeight = img.height;
		imageChargee = true;
	}
	
	window.addEventListener('keydown',this.check,false);
	
	function check(e) {
		if(e.keyCode === 17){
	    	ajouterZone();
		}else{
			if(!firstPointSelected){
				if(e.keyCode === 13){
			    	alert("Vous avez selectionné le premier point, veuillez selectionner le second en appuyant sur la touche 'Entrer'");
			    	if(x1.value.length>0){
			    		firstPointSelected = true;
			    	}
				}
			}else{
				if(!secondPointSelected){
					if(e.keyCode === 13){
				    	alert("Les points sont enregistrer appuyer sur 'Ajouter' pour confirmer ou 'Annuler' pour annuler la sélection");
				    	if(x2.value.length>0){
				    		secondPointSelected = true;
				    	}
				    }
				}
			}
		}
	}
	
	function getWindowHeight() {
	    var windowHeight=0;
	    if (typeof(window.innerHeight)=='number') {
	        windowHeight=window.innerHeight;
	    } else {
	        if (document.documentElement&& document.documentElement.clientHeight) {
	            windowHeight = document.documentElement.clientHeight;
	        } else {
	            if (document.body&&document.body.clientHeight) {
	                windowHeight=document.body.clientHeight;
	            }
	        }
	    }
	    return windowHeight;
	}
	
	function getWindowWidth() {
	 var windowWidth=0;
	 if (typeof(window.innerWidth)=='number') {
	  windowWidth=window.innerWidth;
	    } else {
	  if (document.documentElement&& document.documentElement.clientWidth) {
	   windowWidth = document.documentElement.clientWidth;
	        } else {
	   if (document.body&&document.body.clientWidth) {
	    windowWidth=document.body.clientWidth;
	            }
	        }
	    }
	 return windowWidth;
	}
	
      function getMousePos(canvas, evt) {
        var rect = canvas.getBoundingClientRect();
        return {
          x: evt.clientX - rect.left,
          y: evt.clientY - rect.top
        };
      }
      var canvas = document.getElementById('myCanvas');
      var context = canvas.getContext('2d');

      canvas.addEventListener('mousemove', function(evt) {
        var mousePos = getMousePos(canvas, evt);
        ny=getWindowHeight();
        nx=1014;//nx=getWindowHeight();
        x.value = parseInt(mousePos.x/((nx-110)/imgWidth));
        y.value = parseInt(mousePos.y/((nx-110)/imgWidth));
        zonePointSelected = true;
        if(!firstPointSelected){
	        x1.value = parseInt(mousePos.x/((nx-110)/imgWidth));
	        y1.value = parseInt(mousePos.y/((nx-110)/imgWidth));
        }else{
        	if(!secondPointSelected){
    	        x2.value = parseInt(mousePos.x/((nx-110)/imgWidth));
    	        y2.value = parseInt(mousePos.y/((nx-110)/imgWidth));
            }
        }
      }, false);
	
	function updateLine(x1,y1,x2,y2,idCapteur,acquisition){
        
        // Changement de couleur
        var acq = parseInt(acquisition);
        if(acq>0){
        	context.strokeStyle='#00FF00';
        }else{
        	context.strokeStyle='#FF0000';
        }
        
        //Tracé de la barriere capteur
        
        context.beginPath();
        context.moveTo(x1,y1);
        context.lineTo(x2,y2);
        context.lineWidth = 5;
        context.stroke(); 
    }
</script>
	</body>
</html>