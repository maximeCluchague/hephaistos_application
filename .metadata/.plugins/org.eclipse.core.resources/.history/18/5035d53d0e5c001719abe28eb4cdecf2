package com.za.websocket;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.websocket.EncodeException;
import javax.websocket.OnClose;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

@ServerEndpoint(value = "/hephaistoswebserver", encoders = { SensorMessageEncoder.class}, decoders = {SensorMessageDecoder.class})
public class HephaistosWebServer {
	static Set<Session> sessionClient = Collections.synchronizedSet(new HashSet<Session>());
	static ArrayList<String> capteursConnectee = new ArrayList<String>();
	static String capteurCourant; // Dernier capteur identifié
	
	@OnOpen
	public void handleOpen(Session client){
		System.out.println("[CONNEXION]");
		sessionClient.add(client);
	}
	
	
	@OnMessage
	public void handleMessage(SensorMessage incomingSensorMessage, Session client) throws IOException, EncodeException{
		System.out.println(incomingSensorMessage);
	}
	
	/*@OnMessage
	public void handleMessage(SensorMessage incomingSensorMessage, Session client) throws IOException, EncodeException{
		// FONCTIONNEL
		String nomClient = (String) client.getUserProperties().get("nomClient");
		SensorMessage outgoingSensorMessage = new SensorMessage();
		
		// Si l'utilisateur n'existe pas on le créer
		if(nomClient ==null){
			client.getUserProperties().put("nomClient",incomingSensorMessage.getMessage());
			outgoingSensorMessage.setNomClient("Serveur");
			outgoingSensorMessage.setMessage("Vous êtes connecté en tant que : " + incomingSensorMessage.getMessage());
			System.out.println("[AUTHENTIFICATION] "+incomingSensorMessage.getMessage());
			client.getBasicRemote().sendObject(outgoingSensorMessage);
		}else{
			outgoingSensorMessage.setNomClient(nomClient);
			outgoingSensorMessage.setMessage(incomingSensorMessage.getMessage());
			System.out.println("[MESSAGE] "+incomingSensorMessage.getMessage());
			Iterator<Session> iterator = sessionClient.iterator();
			
			// On renvoie le message recu à toutes les sessions clients
			while(iterator.hasNext()) {
				iterator.next().getBasicRemote().sendObject(outgoingSensorMessage);
			}
		}
		
		// FONCTIONNEL	
	}*/

	@OnClose
	public void handleClose(Session client) throws IOException, EncodeException{
		System.out.println("[DECONNEXION] "+ (String) client.getUserProperties().get("nomClient"));
		sessionClient.remove(client);
	}
}
